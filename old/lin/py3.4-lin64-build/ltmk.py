# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ltmk', [dirname(__file__)])
        except ImportError:
            import _ltmk
            return _ltmk
        if fp is not None:
            try:
                _mod = imp.load_module('_ltmk', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ltmk = swig_import_helper()
    del swig_import_helper
else:
    import _ltmk
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class WordBuffer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WordBuffer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WordBuffer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ltmk.new_WordBuffer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ltmk.delete_WordBuffer
    __del__ = lambda self : None;
    def __getitem__(self, *args) -> "unsigned short" : return _ltmk.WordBuffer___getitem__(self, *args)
    def __setitem__(self, *args) -> "void" : return _ltmk.WordBuffer___setitem__(self, *args)
    def cast(self) -> "unsigned short *" : return _ltmk.WordBuffer_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _ltmk.WordBuffer_frompointer
    if _newclass:frompointer = staticmethod(_ltmk.WordBuffer_frompointer)
WordBuffer_swigregister = _ltmk.WordBuffer_swigregister
WordBuffer_swigregister(WordBuffer)

def WordBuffer_frompointer(*args) -> "WordBuffer *" :
  return _ltmk.WordBuffer_frompointer(*args)
WordBuffer_frompointer = _ltmk.WordBuffer_frompointer

TRUE = _ltmk.TRUE
FALSE = _ltmk.FALSE
TMK_VERSION_MIN = _ltmk.TMK_VERSION_MIN
TMK_VERSION = _ltmk.TMK_VERSION
MAX_TMK_NUMBER = _ltmk.MAX_TMK_NUMBER
MIN_TMK_TYPE = _ltmk.MIN_TMK_TYPE
MAX_TMK_TYPE = _ltmk.MAX_TMK_TYPE
TMK400 = _ltmk.TMK400
TMKMPC = _ltmk.TMKMPC
RTMK400 = _ltmk.RTMK400
TMKX = _ltmk.TMKX
TMKXI = _ltmk.TMKXI
MRTX = _ltmk.MRTX
MRTXI = _ltmk.MRTXI
TA = _ltmk.TA
TAI = _ltmk.TAI
MRTA = _ltmk.MRTA
MRTAI = _ltmk.MRTAI
ALL_TMKS = _ltmk.ALL_TMKS
GET_TIMEOUT = _ltmk.GET_TIMEOUT
SWTIMER_OFF = _ltmk.SWTIMER_OFF
SWTIMER_ON = _ltmk.SWTIMER_ON
SWTIMER_EVENT = _ltmk.SWTIMER_EVENT
SWTIMER_RESET = _ltmk.SWTIMER_RESET
GET_SWTIMER_CTRL = _ltmk.GET_SWTIMER_CTRL
TIMER_RESET = _ltmk.TIMER_RESET
TIMER_OFF = _ltmk.TIMER_OFF
TIMER_16BIT = _ltmk.TIMER_16BIT
TIMER_32BIT = _ltmk.TIMER_32BIT
TIMER_1US = _ltmk.TIMER_1US
TIMER_2US = _ltmk.TIMER_2US
TIMER_4US = _ltmk.TIMER_4US
TIMER_8US = _ltmk.TIMER_8US
TIMER_16US = _ltmk.TIMER_16US
TIMER_32US = _ltmk.TIMER_32US
TIMER_64US = _ltmk.TIMER_64US
TIMER_STOP = _ltmk.TIMER_STOP
TIMER_SYN = _ltmk.TIMER_SYN
TIMER_SYND = _ltmk.TIMER_SYND
TIMER_SA = _ltmk.TIMER_SA
TIMER_NOSTOP = _ltmk.TIMER_NOSTOP
TIMER_MASK = _ltmk.TIMER_MASK
TIMER_STEP = _ltmk.TIMER_STEP
TIMER_BITS = _ltmk.TIMER_BITS
GET_TIMER_CTRL = _ltmk.GET_TIMER_CTRL
DATA_BC_RT = _ltmk.DATA_BC_RT
DATA_BC_RT_BRCST = _ltmk.DATA_BC_RT_BRCST
DATA_RT_BC = _ltmk.DATA_RT_BC
DATA_RT_RT = _ltmk.DATA_RT_RT
DATA_RT_RT_BRCST = _ltmk.DATA_RT_RT_BRCST
CTRL_C_A = _ltmk.CTRL_C_A
CTRL_C_BRCST = _ltmk.CTRL_C_BRCST
CTRL_CD_A = _ltmk.CTRL_CD_A
CTRL_CD_BRCST = _ltmk.CTRL_CD_BRCST
CTRL_C_AD = _ltmk.CTRL_C_AD
BUS_A = _ltmk.BUS_A
BUS_B = _ltmk.BUS_B
BUS_1 = _ltmk.BUS_1
BUS_2 = _ltmk.BUS_2
S_ERAO_MASK = _ltmk.S_ERAO_MASK
S_MEO_MASK = _ltmk.S_MEO_MASK
S_IB_MASK = _ltmk.S_IB_MASK
S_TO_MASK = _ltmk.S_TO_MASK
S_EM_MASK = _ltmk.S_EM_MASK
S_EBC_MASK = _ltmk.S_EBC_MASK
S_DI_MASK = _ltmk.S_DI_MASK
S_ELN_MASK = _ltmk.S_ELN_MASK
S_G1_MASK = _ltmk.S_G1_MASK
S_G2_MASK = _ltmk.S_G2_MASK
NWORDS_MASK = _ltmk.NWORDS_MASK
CMD_MASK = _ltmk.CMD_MASK
SUBADDR_MASK = _ltmk.SUBADDR_MASK
CI_MASK = _ltmk.CI_MASK
HBIT_MASK = _ltmk.HBIT_MASK
RT_DIR_MASK = _ltmk.RT_DIR_MASK
ADDRESS_MASK = _ltmk.ADDRESS_MASK
RTFL_MASK = _ltmk.RTFL_MASK
DNBA_MASK = _ltmk.DNBA_MASK
SSFL_MASK = _ltmk.SSFL_MASK
BUSY_MASK = _ltmk.BUSY_MASK
BRCST_MASK = _ltmk.BRCST_MASK
NULL_MASK = _ltmk.NULL_MASK
SREQ_MASK = _ltmk.SREQ_MASK
ERROR_MASK = _ltmk.ERROR_MASK
SREQ = _ltmk.SREQ
BUSY = _ltmk.BUSY
SSFL = _ltmk.SSFL
RTFL = _ltmk.RTFL
DNBA = _ltmk.DNBA
CWB0 = _ltmk.CWB0
CWB1 = _ltmk.CWB1
BC_MODE = _ltmk.BC_MODE
RT_MODE = _ltmk.RT_MODE
MT_MODE = _ltmk.MT_MODE
MRT_MODE = _ltmk.MRT_MODE
UNDEFINED_MODE = _ltmk.UNDEFINED_MODE
RT_TRANSMIT = _ltmk.RT_TRANSMIT
RT_RECEIVE = _ltmk.RT_RECEIVE
RT_ERROR_MASK = _ltmk.RT_ERROR_MASK
RT_FLAG = _ltmk.RT_FLAG
RT_FLAG_MASK = _ltmk.RT_FLAG_MASK
RT_HBIT_MODE = _ltmk.RT_HBIT_MODE
RT_FLAG_MODE = _ltmk.RT_FLAG_MODE
RT_BRCST_MODE = _ltmk.RT_BRCST_MODE
RT_DATA_BL = _ltmk.RT_DATA_BL
RT_GENER1_BL = _ltmk.RT_GENER1_BL
RT_GENER2_BL = _ltmk.RT_GENER2_BL
BC_GENER1_BL = _ltmk.BC_GENER1_BL
BC_GENER2_BL = _ltmk.BC_GENER2_BL
MT_GENER1_BL = _ltmk.MT_GENER1_BL
MT_GENER2_BL = _ltmk.MT_GENER2_BL
TMK_IRQ_OFF = _ltmk.TMK_IRQ_OFF
CX_CC_MASK = _ltmk.CX_CC_MASK
CX_CONT_MASK = _ltmk.CX_CONT_MASK
CX_BUS_MASK = _ltmk.CX_BUS_MASK
CX_SIG_MASK = _ltmk.CX_SIG_MASK
CX_INT_MASK = _ltmk.CX_INT_MASK
CX_CONT = _ltmk.CX_CONT
CX_STOP = _ltmk.CX_STOP
CX_BUS_0 = _ltmk.CX_BUS_0
CX_BUS_A = _ltmk.CX_BUS_A
CX_BUS_1 = _ltmk.CX_BUS_1
CX_BUS_B = _ltmk.CX_BUS_B
CX_NOSIG = _ltmk.CX_NOSIG
CX_SIG = _ltmk.CX_SIG
CX_INT = _ltmk.CX_INT
CX_NOINT = _ltmk.CX_NOINT
SX_NOERR = _ltmk.SX_NOERR
SX_MEO = _ltmk.SX_MEO
SX_TOA = _ltmk.SX_TOA
SX_TOD = _ltmk.SX_TOD
SX_ELN = _ltmk.SX_ELN
SX_ERAO = _ltmk.SX_ERAO
SX_ESYN = _ltmk.SX_ESYN
SX_EBC = _ltmk.SX_EBC
SX_ERR_MASK = _ltmk.SX_ERR_MASK
SX_IB_MASK = _ltmk.SX_IB_MASK
SX_G1_MASK = _ltmk.SX_G1_MASK
SX_G2_MASK = _ltmk.SX_G2_MASK
SX_K2_MASK = _ltmk.SX_K2_MASK
SX_K1_MASK = _ltmk.SX_K1_MASK
SX_SCC_MASK = _ltmk.SX_SCC_MASK
SX_ME_MASK = _ltmk.SX_ME_MASK
SX_BUS_MASK = _ltmk.SX_BUS_MASK
SX_BUS_0 = _ltmk.SX_BUS_0
SX_BUS_A = _ltmk.SX_BUS_A
SX_BUS_1 = _ltmk.SX_BUS_1
SX_BUS_B = _ltmk.SX_BUS_B
GET_IO_DELAY = _ltmk.GET_IO_DELAY
RT_ENABLE = _ltmk.RT_ENABLE
RT_DISABLE = _ltmk.RT_DISABLE
RT_GET_ENABLE = _ltmk.RT_GET_ENABLE
CMD_DYNAMIC_BUS_CONTROL = _ltmk.CMD_DYNAMIC_BUS_CONTROL
CMD_SYNCHRONIZE = _ltmk.CMD_SYNCHRONIZE
CMD_TRANSMIT_STATUS_WORD = _ltmk.CMD_TRANSMIT_STATUS_WORD
CMD_INITIATE_SELF_TEST = _ltmk.CMD_INITIATE_SELF_TEST
CMD_TRANSMITTER_SHUTDOWN = _ltmk.CMD_TRANSMITTER_SHUTDOWN
CMD_OVERRIDE_TRANSMITTER_SHUTDOWN = _ltmk.CMD_OVERRIDE_TRANSMITTER_SHUTDOWN
CMD_INHIBIT_TERMINAL_FLAG_BIT = _ltmk.CMD_INHIBIT_TERMINAL_FLAG_BIT
CMD_OVERRIDE_INHIBIT_TERMINAL_FLAG_BIT = _ltmk.CMD_OVERRIDE_INHIBIT_TERMINAL_FLAG_BIT
CMD_RESET_REMOTE_TERMINAL = _ltmk.CMD_RESET_REMOTE_TERMINAL
CMD_TRANSMIT_VECTOR_WORD = _ltmk.CMD_TRANSMIT_VECTOR_WORD
CMD_SYNCHRONIZE_WITH_DATA_WORD = _ltmk.CMD_SYNCHRONIZE_WITH_DATA_WORD
CMD_TRANSMIT_LAST_COMMAND_WORD = _ltmk.CMD_TRANSMIT_LAST_COMMAND_WORD
CMD_TRANSMIT_BUILT_IN_TEST_WORD = _ltmk.CMD_TRANSMIT_BUILT_IN_TEST_WORD
TMK_BAD_0 = _ltmk.TMK_BAD_0
TMK_BAD_TYPE = _ltmk.TMK_BAD_TYPE
TMK_BAD_IRQ = _ltmk.TMK_BAD_IRQ
TMK_BAD_NUMBER = _ltmk.TMK_BAD_NUMBER
BC_BAD_BUS = _ltmk.BC_BAD_BUS
BC_BAD_BASE = _ltmk.BC_BAD_BASE
BC_BAD_LEN = _ltmk.BC_BAD_LEN
RT_BAD_PAGE = _ltmk.RT_BAD_PAGE
RT_BAD_LEN = _ltmk.RT_BAD_LEN
RT_BAD_ADDRESS = _ltmk.RT_BAD_ADDRESS
RT_BAD_FUNC = _ltmk.RT_BAD_FUNC
BC_BAD_FUNC = _ltmk.BC_BAD_FUNC
TMK_BAD_FUNC = _ltmk.TMK_BAD_FUNC
VTMK_BAD_VERSION = _ltmk.VTMK_BAD_VERSION
class TTmkConfigData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TTmkConfigData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TTmkConfigData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nType"] = _ltmk.TTmkConfigData_nType_set
    __swig_getmethods__["nType"] = _ltmk.TTmkConfigData_nType_get
    if _newclass:nType = _swig_property(_ltmk.TTmkConfigData_nType_get, _ltmk.TTmkConfigData_nType_set)
    __swig_setmethods__["szName"] = _ltmk.TTmkConfigData_szName_set
    __swig_getmethods__["szName"] = _ltmk.TTmkConfigData_szName_get
    if _newclass:szName = _swig_property(_ltmk.TTmkConfigData_szName_get, _ltmk.TTmkConfigData_szName_set)
    __swig_setmethods__["wPorts1"] = _ltmk.TTmkConfigData_wPorts1_set
    __swig_getmethods__["wPorts1"] = _ltmk.TTmkConfigData_wPorts1_get
    if _newclass:wPorts1 = _swig_property(_ltmk.TTmkConfigData_wPorts1_get, _ltmk.TTmkConfigData_wPorts1_set)
    __swig_setmethods__["wPorts2"] = _ltmk.TTmkConfigData_wPorts2_set
    __swig_getmethods__["wPorts2"] = _ltmk.TTmkConfigData_wPorts2_get
    if _newclass:wPorts2 = _swig_property(_ltmk.TTmkConfigData_wPorts2_get, _ltmk.TTmkConfigData_wPorts2_set)
    __swig_setmethods__["wIrq1"] = _ltmk.TTmkConfigData_wIrq1_set
    __swig_getmethods__["wIrq1"] = _ltmk.TTmkConfigData_wIrq1_get
    if _newclass:wIrq1 = _swig_property(_ltmk.TTmkConfigData_wIrq1_get, _ltmk.TTmkConfigData_wIrq1_set)
    __swig_setmethods__["wIrq2"] = _ltmk.TTmkConfigData_wIrq2_set
    __swig_getmethods__["wIrq2"] = _ltmk.TTmkConfigData_wIrq2_get
    if _newclass:wIrq2 = _swig_property(_ltmk.TTmkConfigData_wIrq2_get, _ltmk.TTmkConfigData_wIrq2_set)
    __swig_setmethods__["wIODelay"] = _ltmk.TTmkConfigData_wIODelay_set
    __swig_getmethods__["wIODelay"] = _ltmk.TTmkConfigData_wIODelay_get
    if _newclass:wIODelay = _swig_property(_ltmk.TTmkConfigData_wIODelay_get, _ltmk.TTmkConfigData_wIODelay_set)
    def __init__(self): 
        this = _ltmk.new_TTmkConfigData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ltmk.delete_TTmkConfigData
    __del__ = lambda self : None;
TTmkConfigData_swigregister = _ltmk.TTmkConfigData_swigregister
TTmkConfigData_swigregister(TTmkConfigData)

class TBc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TBc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TBc, name)
    __repr__ = _swig_repr
    __swig_setmethods__["wResult"] = _ltmk.TBc_wResult_set
    __swig_getmethods__["wResult"] = _ltmk.TBc_wResult_get
    if _newclass:wResult = _swig_property(_ltmk.TBc_wResult_get, _ltmk.TBc_wResult_set)
    __swig_setmethods__["wAW1"] = _ltmk.TBc_wAW1_set
    __swig_getmethods__["wAW1"] = _ltmk.TBc_wAW1_get
    if _newclass:wAW1 = _swig_property(_ltmk.TBc_wAW1_get, _ltmk.TBc_wAW1_set)
    __swig_setmethods__["wAW2"] = _ltmk.TBc_wAW2_set
    __swig_getmethods__["wAW2"] = _ltmk.TBc_wAW2_get
    if _newclass:wAW2 = _swig_property(_ltmk.TBc_wAW2_get, _ltmk.TBc_wAW2_set)
    def __init__(self): 
        this = _ltmk.new_TBc()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ltmk.delete_TBc
    __del__ = lambda self : None;
TBc_swigregister = _ltmk.TBc_swigregister
TBc_swigregister(TBc)

class TBcx(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TBcx, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TBcx, name)
    __repr__ = _swig_repr
    __swig_setmethods__["wBase"] = _ltmk.TBcx_wBase_set
    __swig_getmethods__["wBase"] = _ltmk.TBcx_wBase_get
    if _newclass:wBase = _swig_property(_ltmk.TBcx_wBase_get, _ltmk.TBcx_wBase_set)
    __swig_setmethods__["wResultX"] = _ltmk.TBcx_wResultX_set
    __swig_getmethods__["wResultX"] = _ltmk.TBcx_wResultX_get
    if _newclass:wResultX = _swig_property(_ltmk.TBcx_wResultX_get, _ltmk.TBcx_wResultX_set)
    def __init__(self): 
        this = _ltmk.new_TBcx()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ltmk.delete_TBcx
    __del__ = lambda self : None;
TBcx_swigregister = _ltmk.TBcx_swigregister
TBcx_swigregister(TBcx)

class TRt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TRt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TRt, name)
    __repr__ = _swig_repr
    __swig_setmethods__["wStatus"] = _ltmk.TRt_wStatus_set
    __swig_getmethods__["wStatus"] = _ltmk.TRt_wStatus_get
    if _newclass:wStatus = _swig_property(_ltmk.TRt_wStatus_get, _ltmk.TRt_wStatus_set)
    __swig_setmethods__["wCmd"] = _ltmk.TRt_wCmd_set
    __swig_getmethods__["wCmd"] = _ltmk.TRt_wCmd_get
    if _newclass:wCmd = _swig_property(_ltmk.TRt_wCmd_get, _ltmk.TRt_wCmd_set)
    def __init__(self): 
        this = _ltmk.new_TRt()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ltmk.delete_TRt
    __del__ = lambda self : None;
TRt_swigregister = _ltmk.TRt_swigregister
TRt_swigregister(TRt)

class TMt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TMt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TMt, name)
    __repr__ = _swig_repr
    __swig_setmethods__["wBase"] = _ltmk.TMt_wBase_set
    __swig_getmethods__["wBase"] = _ltmk.TMt_wBase_get
    if _newclass:wBase = _swig_property(_ltmk.TMt_wBase_get, _ltmk.TMt_wBase_set)
    __swig_setmethods__["wResultX"] = _ltmk.TMt_wResultX_set
    __swig_getmethods__["wResultX"] = _ltmk.TMt_wResultX_get
    if _newclass:wResultX = _swig_property(_ltmk.TMt_wResultX_get, _ltmk.TMt_wResultX_set)
    def __init__(self): 
        this = _ltmk.new_TMt()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ltmk.delete_TMt
    __del__ = lambda self : None;
TMt_swigregister = _ltmk.TMt_swigregister
TMt_swigregister(TMt)

class TMrt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TMrt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TMrt, name)
    __repr__ = _swig_repr
    __swig_setmethods__["wStatus"] = _ltmk.TMrt_wStatus_set
    __swig_getmethods__["wStatus"] = _ltmk.TMrt_wStatus_get
    if _newclass:wStatus = _swig_property(_ltmk.TMrt_wStatus_get, _ltmk.TMrt_wStatus_set)
    def __init__(self): 
        this = _ltmk.new_TMrt()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ltmk.delete_TMrt
    __del__ = lambda self : None;
TMrt_swigregister = _ltmk.TMrt_swigregister
TMrt_swigregister(TMrt)

class TTmk(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TTmk, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TTmk, name)
    __repr__ = _swig_repr
    __swig_setmethods__["wRequest"] = _ltmk.TTmk_wRequest_set
    __swig_getmethods__["wRequest"] = _ltmk.TTmk_wRequest_get
    if _newclass:wRequest = _swig_property(_ltmk.TTmk_wRequest_get, _ltmk.TTmk_wRequest_set)
    def __init__(self): 
        this = _ltmk.new_TTmk()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ltmk.delete_TTmk
    __del__ = lambda self : None;
TTmk_swigregister = _ltmk.TTmk_swigregister
TTmk_swigregister(TTmk)

class TSub(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TSub, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TSub, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bc"] = _ltmk.TSub_bc_set
    __swig_getmethods__["bc"] = _ltmk.TSub_bc_get
    if _newclass:bc = _swig_property(_ltmk.TSub_bc_get, _ltmk.TSub_bc_set)
    __swig_setmethods__["bcx"] = _ltmk.TSub_bcx_set
    __swig_getmethods__["bcx"] = _ltmk.TSub_bcx_get
    if _newclass:bcx = _swig_property(_ltmk.TSub_bcx_get, _ltmk.TSub_bcx_set)
    __swig_setmethods__["rt"] = _ltmk.TSub_rt_set
    __swig_getmethods__["rt"] = _ltmk.TSub_rt_get
    if _newclass:rt = _swig_property(_ltmk.TSub_rt_get, _ltmk.TSub_rt_set)
    __swig_setmethods__["mt"] = _ltmk.TSub_mt_set
    __swig_getmethods__["mt"] = _ltmk.TSub_mt_get
    if _newclass:mt = _swig_property(_ltmk.TSub_mt_get, _ltmk.TSub_mt_set)
    __swig_setmethods__["mrt"] = _ltmk.TSub_mrt_set
    __swig_getmethods__["mrt"] = _ltmk.TSub_mrt_get
    if _newclass:mrt = _swig_property(_ltmk.TSub_mrt_get, _ltmk.TSub_mrt_set)
    __swig_setmethods__["tmk"] = _ltmk.TSub_tmk_set
    __swig_getmethods__["tmk"] = _ltmk.TSub_tmk_get
    if _newclass:tmk = _swig_property(_ltmk.TSub_tmk_get, _ltmk.TSub_tmk_set)
    def __init__(self): 
        this = _ltmk.new_TSub()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ltmk.delete_TSub
    __del__ = lambda self : None;
TSub_swigregister = _ltmk.TSub_swigregister
TSub_swigregister(TSub)

class TTmkEventData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TTmkEventData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TTmkEventData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nInt"] = _ltmk.TTmkEventData_nInt_set
    __swig_getmethods__["nInt"] = _ltmk.TTmkEventData_nInt_get
    if _newclass:nInt = _swig_property(_ltmk.TTmkEventData_nInt_get, _ltmk.TTmkEventData_nInt_set)
    __swig_setmethods__["wMode"] = _ltmk.TTmkEventData_wMode_set
    __swig_getmethods__["wMode"] = _ltmk.TTmkEventData_wMode_get
    if _newclass:wMode = _swig_property(_ltmk.TTmkEventData_wMode_get, _ltmk.TTmkEventData_wMode_set)
    __swig_setmethods__["sub"] = _ltmk.TTmkEventData_sub_set
    __swig_getmethods__["sub"] = _ltmk.TTmkEventData_sub_get
    if _newclass:sub = _swig_property(_ltmk.TTmkEventData_sub_get, _ltmk.TTmkEventData_sub_set)
    def __init__(self): 
        this = _ltmk.new_TTmkEventData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ltmk.delete_TTmkEventData
    __del__ = lambda self : None;
TTmkEventData_swigregister = _ltmk.TTmkEventData_swigregister
TTmkEventData_swigregister(TTmkEventData)

TMK_IOC_MAGIC = _ltmk.TMK_IOC_MAGIC
TMK_IOC0 = _ltmk.TMK_IOC0
VTMK_tmkconfig = _ltmk.VTMK_tmkconfig
VTMK_tmkdone = _ltmk.VTMK_tmkdone
VTMK_tmkgetmaxn = _ltmk.VTMK_tmkgetmaxn
VTMK_tmkselect = _ltmk.VTMK_tmkselect
VTMK_tmkselected = _ltmk.VTMK_tmkselected
VTMK_tmkgetmode = _ltmk.VTMK_tmkgetmode
VTMK_tmksetcwbits = _ltmk.VTMK_tmksetcwbits
VTMK_tmkclrcwbits = _ltmk.VTMK_tmkclrcwbits
VTMK_tmkgetcwbits = _ltmk.VTMK_tmkgetcwbits
VTMK_tmkwaitevents = _ltmk.VTMK_tmkwaitevents
VTMK_tmkgetevd = _ltmk.VTMK_tmkgetevd
VTMK_bcreset = _ltmk.VTMK_bcreset
VTMK_bc_def_tldw = _ltmk.VTMK_bc_def_tldw
VTMK_bc_enable_di = _ltmk.VTMK_bc_enable_di
VTMK_bc_disable_di = _ltmk.VTMK_bc_disable_di
VTMK_bcdefirqmode = _ltmk.VTMK_bcdefirqmode
VTMK_bcgetirqmode = _ltmk.VTMK_bcgetirqmode
VTMK_bcgetmaxbase = _ltmk.VTMK_bcgetmaxbase
VTMK_bcdefbase = _ltmk.VTMK_bcdefbase
VTMK_bcgetbase = _ltmk.VTMK_bcgetbase
VTMK_bcputw = _ltmk.VTMK_bcputw
VTMK_bcgetw = _ltmk.VTMK_bcgetw
VTMK_bcgetansw = _ltmk.VTMK_bcgetansw
VTMK_bcputblk = _ltmk.VTMK_bcputblk
VTMK_bcgetblk = _ltmk.VTMK_bcgetblk
VTMK_bcdefbus = _ltmk.VTMK_bcdefbus
VTMK_bcgetbus = _ltmk.VTMK_bcgetbus
VTMK_bcstart = _ltmk.VTMK_bcstart
VTMK_bcstartx = _ltmk.VTMK_bcstartx
VTMK_bcdeflink = _ltmk.VTMK_bcdeflink
VTMK_bcgetlink = _ltmk.VTMK_bcgetlink
VTMK_bcstop = _ltmk.VTMK_bcstop
VTMK_bcgetstate = _ltmk.VTMK_bcgetstate
VTMK_rtreset = _ltmk.VTMK_rtreset
VTMK_rtdefirqmode = _ltmk.VTMK_rtdefirqmode
VTMK_rtgetirqmode = _ltmk.VTMK_rtgetirqmode
VTMK_rtdefmode = _ltmk.VTMK_rtdefmode
VTMK_rtgetmode = _ltmk.VTMK_rtgetmode
VTMK_rtgetmaxpage = _ltmk.VTMK_rtgetmaxpage
VTMK_rtdefpage = _ltmk.VTMK_rtdefpage
VTMK_rtgetpage = _ltmk.VTMK_rtgetpage
VTMK_rtdefpagepc = _ltmk.VTMK_rtdefpagepc
VTMK_rtdefpagebus = _ltmk.VTMK_rtdefpagebus
VTMK_rtgetpagepc = _ltmk.VTMK_rtgetpagepc
VTMK_rtgetpagebus = _ltmk.VTMK_rtgetpagebus
VTMK_rtdefaddress = _ltmk.VTMK_rtdefaddress
VTMK_rtgetaddress = _ltmk.VTMK_rtgetaddress
VTMK_rtdefsubaddr = _ltmk.VTMK_rtdefsubaddr
VTMK_rtgetsubaddr = _ltmk.VTMK_rtgetsubaddr
VTMK_rtputw = _ltmk.VTMK_rtputw
VTMK_rtgetw = _ltmk.VTMK_rtgetw
VTMK_rtputblk = _ltmk.VTMK_rtputblk
VTMK_rtgetblk = _ltmk.VTMK_rtgetblk
VTMK_rtsetanswbits = _ltmk.VTMK_rtsetanswbits
VTMK_rtclranswbits = _ltmk.VTMK_rtclranswbits
VTMK_rtgetanswbits = _ltmk.VTMK_rtgetanswbits
VTMK_rtgetflags = _ltmk.VTMK_rtgetflags
VTMK_rtputflags = _ltmk.VTMK_rtputflags
VTMK_rtsetflag = _ltmk.VTMK_rtsetflag
VTMK_rtclrflag = _ltmk.VTMK_rtclrflag
VTMK_rtgetflag = _ltmk.VTMK_rtgetflag
VTMK_rtgetstate = _ltmk.VTMK_rtgetstate
VTMK_rtbusy = _ltmk.VTMK_rtbusy
VTMK_rtlock = _ltmk.VTMK_rtlock
VTMK_rtunlock = _ltmk.VTMK_rtunlock
VTMK_rtgetcmddata = _ltmk.VTMK_rtgetcmddata
VTMK_rtputcmddata = _ltmk.VTMK_rtputcmddata
VTMK_mtreset = _ltmk.VTMK_mtreset
VTMK_mtdefirqmode = _ltmk.VTMK_mtdefirqmode
VTMK_mtgetirqmode = _ltmk.VTMK_mtgetirqmode
VTMK_mtgetmaxbase = _ltmk.VTMK_mtgetmaxbase
VTMK_mtdefbase = _ltmk.VTMK_mtdefbase
VTMK_mtgetbase = _ltmk.VTMK_mtgetbase
VTMK_mtputw = _ltmk.VTMK_mtputw
VTMK_mtgetw = _ltmk.VTMK_mtgetw
VTMK_mtgetsw = _ltmk.VTMK_mtgetsw
VTMK_mtputblk = _ltmk.VTMK_mtputblk
VTMK_mtgetblk = _ltmk.VTMK_mtgetblk
VTMK_mtstartx = _ltmk.VTMK_mtstartx
VTMK_mtdeflink = _ltmk.VTMK_mtdeflink
VTMK_mtgetlink = _ltmk.VTMK_mtgetlink
VTMK_mtstop = _ltmk.VTMK_mtstop
VTMK_mtgetstate = _ltmk.VTMK_mtgetstate
VTMK_tmkgetinfo = _ltmk.VTMK_tmkgetinfo
VTMK_GetVersion = _ltmk.VTMK_GetVersion
VTMK_rtenable = _ltmk.VTMK_rtenable
VTMK_mrtgetmaxn = _ltmk.VTMK_mrtgetmaxn
VTMK_mrtconfig = _ltmk.VTMK_mrtconfig
VTMK_mrtselected = _ltmk.VTMK_mrtselected
VTMK_mrtgetstate = _ltmk.VTMK_mrtgetstate
VTMK_mrtdefbrcsubaddr0 = _ltmk.VTMK_mrtdefbrcsubaddr0
VTMK_mrtreset = _ltmk.VTMK_mrtreset
VTMK_tmktimer = _ltmk.VTMK_tmktimer
VTMK_tmkgettimer = _ltmk.VTMK_tmkgettimer
VTMK_tmkgettimerl = _ltmk.VTMK_tmkgettimerl
VTMK_bcgetmsgtime = _ltmk.VTMK_bcgetmsgtime
VTMK_mtgetmsgtime = _ltmk.VTMK_mtgetmsgtime
VTMK_rtgetmsgtime = _ltmk.VTMK_rtgetmsgtime
VTMK_tmkgethwver = _ltmk.VTMK_tmkgethwver
VTMK_tmkgetevtime = _ltmk.VTMK_tmkgetevtime
VTMK_tmkswtimer = _ltmk.VTMK_tmkswtimer
VTMK_tmkgetswtimer = _ltmk.VTMK_tmkgetswtimer
VTMK_tmktimeout = _ltmk.VTMK_tmktimeout
VTMK_mrtdefbrcpage = _ltmk.VTMK_mrtdefbrcpage
VTMK_mrtgetbrcpage = _ltmk.VTMK_mrtgetbrcpage
TMK_IOC_MAXNR = _ltmk.TMK_IOC_MAXNR

def TmkOpen() -> "int" :
  return _ltmk.TmkOpen()
TmkOpen = _ltmk.TmkOpen

def TmkClose() -> "void" :
  return _ltmk.TmkClose()
TmkClose = _ltmk.TmkClose

def tmkgetmaxn() -> "int" :
  return _ltmk.tmkgetmaxn()
tmkgetmaxn = _ltmk.tmkgetmaxn

def tmkconfig(*args) -> "int" :
  return _ltmk.tmkconfig(*args)
tmkconfig = _ltmk.tmkconfig

def tmkdone(*args) -> "int" :
  return _ltmk.tmkdone(*args)
tmkdone = _ltmk.tmkdone

def tmkselect(*args) -> "int" :
  return _ltmk.tmkselect(*args)
tmkselect = _ltmk.tmkselect

def tmkselected() -> "int" :
  return _ltmk.tmkselected()
tmkselected = _ltmk.tmkselected

def tmkgetmode() -> "unsigned short" :
  return _ltmk.tmkgetmode()
tmkgetmode = _ltmk.tmkgetmode

def tmksetcwbits(*args) -> "void" :
  return _ltmk.tmksetcwbits(*args)
tmksetcwbits = _ltmk.tmksetcwbits

def tmkclrcwbits(*args) -> "void" :
  return _ltmk.tmkclrcwbits(*args)
tmkclrcwbits = _ltmk.tmkclrcwbits

def tmkgetcwbits() -> "unsigned short" :
  return _ltmk.tmkgetcwbits()
tmkgetcwbits = _ltmk.tmkgetcwbits

def tmkgetevd(*args) -> "void" :
  return _ltmk.tmkgetevd(*args)
tmkgetevd = _ltmk.tmkgetevd

def tmkwaitevents(*args) -> "int" :
  return _ltmk.tmkwaitevents(*args)
tmkwaitevents = _ltmk.tmkwaitevents

def bcreset() -> "int" :
  return _ltmk.bcreset()
bcreset = _ltmk.bcreset

def bcdefirqmode(*args) -> "int" :
  return _ltmk.bcdefirqmode(*args)
bcdefirqmode = _ltmk.bcdefirqmode

def bcgetirqmode() -> "unsigned short" :
  return _ltmk.bcgetirqmode()
bcgetirqmode = _ltmk.bcgetirqmode

def bcgetmaxbase() -> "unsigned short" :
  return _ltmk.bcgetmaxbase()
bcgetmaxbase = _ltmk.bcgetmaxbase

def bcdefbase(*args) -> "int" :
  return _ltmk.bcdefbase(*args)
bcdefbase = _ltmk.bcdefbase

def bcgetbase() -> "unsigned short" :
  return _ltmk.bcgetbase()
bcgetbase = _ltmk.bcgetbase

def bcputw(*args) -> "void" :
  return _ltmk.bcputw(*args)
bcputw = _ltmk.bcputw

def bcgetw(*args) -> "unsigned short" :
  return _ltmk.bcgetw(*args)
bcgetw = _ltmk.bcgetw

def bcgetansw(*args) -> "unsigned int" :
  return _ltmk.bcgetansw(*args)
bcgetansw = _ltmk.bcgetansw

def bcputblk(*args) -> "void" :
  return _ltmk.bcputblk(*args)
bcputblk = _ltmk.bcputblk

def bcgetblk(*args) -> "void" :
  return _ltmk.bcgetblk(*args)
bcgetblk = _ltmk.bcgetblk

def bcdefbus(*args) -> "int" :
  return _ltmk.bcdefbus(*args)
bcdefbus = _ltmk.bcdefbus

def bcgetbus() -> "unsigned short" :
  return _ltmk.bcgetbus()
bcgetbus = _ltmk.bcgetbus

def bcstart(*args) -> "int" :
  return _ltmk.bcstart(*args)
bcstart = _ltmk.bcstart

def bcstartx(*args) -> "int" :
  return _ltmk.bcstartx(*args)
bcstartx = _ltmk.bcstartx

def bcdeflink(*args) -> "int" :
  return _ltmk.bcdeflink(*args)
bcdeflink = _ltmk.bcdeflink

def bcgetlink() -> "unsigned int" :
  return _ltmk.bcgetlink()
bcgetlink = _ltmk.bcgetlink

def bcstop() -> "unsigned short" :
  return _ltmk.bcstop()
bcstop = _ltmk.bcstop

def bcgetstate() -> "unsigned int" :
  return _ltmk.bcgetstate()
bcgetstate = _ltmk.bcgetstate

def rtreset() -> "int" :
  return _ltmk.rtreset()
rtreset = _ltmk.rtreset

def rtdefirqmode(*args) -> "int" :
  return _ltmk.rtdefirqmode(*args)
rtdefirqmode = _ltmk.rtdefirqmode

def rtgetirqmode() -> "unsigned short" :
  return _ltmk.rtgetirqmode()
rtgetirqmode = _ltmk.rtgetirqmode

def rtdefmode(*args) -> "int" :
  return _ltmk.rtdefmode(*args)
rtdefmode = _ltmk.rtdefmode

def rtgetmode() -> "unsigned short" :
  return _ltmk.rtgetmode()
rtgetmode = _ltmk.rtgetmode

def rtgetmaxpage() -> "unsigned short" :
  return _ltmk.rtgetmaxpage()
rtgetmaxpage = _ltmk.rtgetmaxpage

def rtdefpage(*args) -> "int" :
  return _ltmk.rtdefpage(*args)
rtdefpage = _ltmk.rtdefpage

def rtgetpage() -> "unsigned short" :
  return _ltmk.rtgetpage()
rtgetpage = _ltmk.rtgetpage

def rtdefpagepc(*args) -> "int" :
  return _ltmk.rtdefpagepc(*args)
rtdefpagepc = _ltmk.rtdefpagepc

def rtdefpagebus(*args) -> "int" :
  return _ltmk.rtdefpagebus(*args)
rtdefpagebus = _ltmk.rtdefpagebus

def rtgetpagepc() -> "unsigned short" :
  return _ltmk.rtgetpagepc()
rtgetpagepc = _ltmk.rtgetpagepc

def rtgetpagebus() -> "unsigned short" :
  return _ltmk.rtgetpagebus()
rtgetpagebus = _ltmk.rtgetpagebus

def rtdefaddress(*args) -> "int" :
  return _ltmk.rtdefaddress(*args)
rtdefaddress = _ltmk.rtdefaddress

def rtgetaddress() -> "unsigned short" :
  return _ltmk.rtgetaddress()
rtgetaddress = _ltmk.rtgetaddress

def rtdefsubaddr(*args) -> "void" :
  return _ltmk.rtdefsubaddr(*args)
rtdefsubaddr = _ltmk.rtdefsubaddr

def rtgetsubaddr() -> "unsigned short" :
  return _ltmk.rtgetsubaddr()
rtgetsubaddr = _ltmk.rtgetsubaddr

def rtputw(*args) -> "void" :
  return _ltmk.rtputw(*args)
rtputw = _ltmk.rtputw

def rtgetw(*args) -> "unsigned short" :
  return _ltmk.rtgetw(*args)
rtgetw = _ltmk.rtgetw

def rtputblk(*args) -> "void" :
  return _ltmk.rtputblk(*args)
rtputblk = _ltmk.rtputblk

def rtgetblk(*args) -> "void" :
  return _ltmk.rtgetblk(*args)
rtgetblk = _ltmk.rtgetblk

def rtsetanswbits(*args) -> "void" :
  return _ltmk.rtsetanswbits(*args)
rtsetanswbits = _ltmk.rtsetanswbits

def rtclranswbits(*args) -> "void" :
  return _ltmk.rtclranswbits(*args)
rtclranswbits = _ltmk.rtclranswbits

def rtgetanswbits() -> "unsigned short" :
  return _ltmk.rtgetanswbits()
rtgetanswbits = _ltmk.rtgetanswbits

def rtgetflags(*args) -> "void" :
  return _ltmk.rtgetflags(*args)
rtgetflags = _ltmk.rtgetflags

def rtputflags(*args) -> "void" :
  return _ltmk.rtputflags(*args)
rtputflags = _ltmk.rtputflags

def rtsetflag() -> "void" :
  return _ltmk.rtsetflag()
rtsetflag = _ltmk.rtsetflag

def rtclrflag() -> "void" :
  return _ltmk.rtclrflag()
rtclrflag = _ltmk.rtclrflag

def rtgetflag(*args) -> "unsigned short" :
  return _ltmk.rtgetflag(*args)
rtgetflag = _ltmk.rtgetflag

def rtgetstate() -> "unsigned short" :
  return _ltmk.rtgetstate()
rtgetstate = _ltmk.rtgetstate

def rtbusy() -> "unsigned short" :
  return _ltmk.rtbusy()
rtbusy = _ltmk.rtbusy

def rtlock(*args) -> "void" :
  return _ltmk.rtlock(*args)
rtlock = _ltmk.rtlock

def rtunlock() -> "void" :
  return _ltmk.rtunlock()
rtunlock = _ltmk.rtunlock

def rtgetcmddata(*args) -> "unsigned short" :
  return _ltmk.rtgetcmddata(*args)
rtgetcmddata = _ltmk.rtgetcmddata

def rtputcmddata(*args) -> "void" :
  return _ltmk.rtputcmddata(*args)
rtputcmddata = _ltmk.rtputcmddata

def mtreset() -> "int" :
  return _ltmk.mtreset()
mtreset = _ltmk.mtreset

def mtgetsw() -> "unsigned short" :
  return _ltmk.mtgetsw()
mtgetsw = _ltmk.mtgetsw

def rtenable(*args) -> "unsigned short" :
  return _ltmk.rtenable(*args)
rtenable = _ltmk.rtenable

def mrtgetmaxn() -> "int" :
  return _ltmk.mrtgetmaxn()
mrtgetmaxn = _ltmk.mrtgetmaxn

def mrtconfig(*args) -> "unsigned int" :
  return _ltmk.mrtconfig(*args)
mrtconfig = _ltmk.mrtconfig

def mrtselected() -> "int" :
  return _ltmk.mrtselected()
mrtselected = _ltmk.mrtselected

def mrtgetstate() -> "unsigned short" :
  return _ltmk.mrtgetstate()
mrtgetstate = _ltmk.mrtgetstate

def mrtdefbrcsubaddr0() -> "void" :
  return _ltmk.mrtdefbrcsubaddr0()
mrtdefbrcsubaddr0 = _ltmk.mrtdefbrcsubaddr0

def mrtreset() -> "int" :
  return _ltmk.mrtreset()
mrtreset = _ltmk.mrtreset

def tmktimer(*args) -> "unsigned short" :
  return _ltmk.tmktimer(*args)
tmktimer = _ltmk.tmktimer

def tmkgettimer() -> "unsigned int" :
  return _ltmk.tmkgettimer()
tmkgettimer = _ltmk.tmkgettimer

def tmkgettimerl() -> "unsigned short" :
  return _ltmk.tmkgettimerl()
tmkgettimerl = _ltmk.tmkgettimerl

def bcgetmsgtime() -> "unsigned int" :
  return _ltmk.bcgetmsgtime()
bcgetmsgtime = _ltmk.bcgetmsgtime

def rtgetmsgtime() -> "unsigned int" :
  return _ltmk.rtgetmsgtime()
rtgetmsgtime = _ltmk.rtgetmsgtime

def tmkgethwver() -> "unsigned short" :
  return _ltmk.tmkgethwver()
tmkgethwver = _ltmk.tmkgethwver

def tmkgetevtime() -> "unsigned int" :
  return _ltmk.tmkgetevtime()
tmkgetevtime = _ltmk.tmkgetevtime

def tmkswtimer(*args) -> "unsigned short" :
  return _ltmk.tmkswtimer(*args)
tmkswtimer = _ltmk.tmkswtimer

def tmkgetswtimer() -> "unsigned int" :
  return _ltmk.tmkgetswtimer()
tmkgetswtimer = _ltmk.tmkgetswtimer

def tmktimeout(*args) -> "unsigned short" :
  return _ltmk.tmktimeout(*args)
tmktimeout = _ltmk.tmktimeout

def mrtdefbrcpage(*args) -> "int" :
  return _ltmk.mrtdefbrcpage(*args)
mrtdefbrcpage = _ltmk.mrtdefbrcpage

def mrtgetbrcpage() -> "unsigned short" :
  return _ltmk.mrtgetbrcpage()
mrtgetbrcpage = _ltmk.mrtgetbrcpage
# This file is compatible with both classic and new-style classes.


